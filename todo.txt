Doesnt throw errors but it removed items from a destroyed object which results in OnInventoryChanged nre's from some mods

        RoR2.MinionOwnership+MinionGroup.SetMinionOwner (RoR2.MinionOwnership minion, UnityEngine.Networking.NetworkInstanceId ownerId) (at <f7443728c4d4442b8c2db9f6c21a6e92>:IL_0022)
        RoR2.MinionOwnership.OnDestroy () (at <f7443728c4d4442b8c2db9f6c21a6e92>:IL_0000)


There is an elusive error initially observed with scorchling's fire projectile where when it lands TakeDamageProcess throws NRE, the projectile isn't destroyed and the whole process repeats.
I've gone on looped runs to try and replicate it, but I forgot that bepinex patches that method for the expose log spam so the stack trace hasn't been useful.
I'm now try-catching orig(self) and dumping items/buffs/etc for both victim and attacker to figure out where in the method the null is. But so far I haven't encountered it again.


need to investigate convar stuff, egsToggle breaks with current hook. commenting out for now.

[Error  : Unity Log] Exception: Attempting to use an invalid operation handle
Stack trace:
UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1[TObject].get_InternalOp () (at <62e1f0759ce84c369cc921c12e4a3d31>:IL_001B)
UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1[TObject].get_Result () (at <62e1f0759ce84c369cc921c12e4a3d31>:IL_0000)
RoR2.ContentManagement.AssetOrDirectReference`1[T].get_Result () (at <c0d9c70405a04cceacc72f65157d1ebd>:IL_0016)
RoR2.SkinDef+RuntimeSkin+<ApplyAsync>d__10.MoveNext () (at <c0d9c70405a04cceacc72f65157d1ebd>:IL_0531)
RoR2.SkinDef+<ApplyAsync>d__36.MoveNext () (at <c0d9c70405a04cceacc72f65157d1ebd>:IL_00B1)
RoR2.ModelSkinController+<ApplySkinAsync>d__29.MoveNext () (at <c0d9c70405a04cceacc72f65157d1ebd>:IL_00A4)
UnityEngine.SetupCoroutine.InvokeMoveNext (System.Collections.IEnumerator enumerator, System.IntPtr returnValueAddress) (at <a20b3695b7ce4017b7981f9d06962bd1>:IL_0026)
